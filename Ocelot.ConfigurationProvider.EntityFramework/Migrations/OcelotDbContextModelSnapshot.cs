// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ocelot.ConfigurationProvider.EntityFramework;

namespace Ocelot.ConfigurationProvider.EntityFramework.Migrations
{
    [DbContext(typeof(OcelotDbContext))]
    partial class OcelotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ocelot.ConfigurationProvider.EntityFramework.Models.GlobalConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseUrl");

                    b.Property<int>("ConfigurationId");

                    b.Property<string>("DownstreamScheme");

                    b.Property<string>("HttpHandlerOption");

                    b.Property<string>("RequestIdKey");

                    b.HasKey("Id");

                    b.ToTable("OcelotGlobalConfigurations");
                });

            modelBuilder.Entity("Ocelot.ConfigurationProvider.EntityFramework.Models.OcelotConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<bool>("IsEnabled");

                    b.HasKey("Id");

                    b.ToTable("OcelotConfigurations");
                });

            modelBuilder.Entity("Ocelot.ConfigurationProvider.EntityFramework.Models.ReRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddClaimsToRequest");

                    b.Property<string>("AddHeadersToRequest");

                    b.Property<string>("AddQueriesToRequest");

                    b.Property<string>("AuthenticationOption");

                    b.Property<string>("CacheOption");

                    b.Property<int>("ConfigurationId");

                    b.Property<bool>("DangerousAcceptAnyServerCertificateValidator");

                    b.Property<string>("DelegatingHandler");

                    b.Property<string>("DownstreamHeaderTransform");

                    b.Property<string>("DownstreamHostAndPorts");

                    b.Property<string>("DownstreamPathTemplate");

                    b.Property<string>("DownstreamScheme");

                    b.Property<string>("HttpHandlerOption");

                    b.Property<string>("Key");

                    b.Property<string>("LoadBalancerOption");

                    b.Property<int>("Priority");

                    b.Property<string>("QoSOption");

                    b.Property<string>("RateLimitOption");

                    b.Property<bool>("ReRouteIsCaseSensitive");

                    b.Property<string>("RequestIdKey");

                    b.Property<string>("RouteClaimsRequirement");

                    b.Property<string>("SecurityOption");

                    b.Property<string>("ServiceName");

                    b.Property<int>("Timeout");

                    b.Property<string>("UpstreamHeaderTransform");

                    b.Property<string>("UpstreamHost");

                    b.Property<string>("UpstreamHttpMethod");

                    b.Property<string>("UpstreamPathTemplate");

                    b.HasKey("Id");

                    b.ToTable("OcelotReRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
